AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: SCDOR Rebuild - Shared Infrastructure Resources

Parameters:
  Environment:
    Type: String
    Default: dev
    AllowedValues:
      - dev
      - staging
      - prod
    Description: Deployment environment
  
  ProjectName:
    Type: String
    Default: scdor-rebuild
    Description: Project name for resource naming

Globals:
  Function:
    Runtime: nodejs20.x
    MemorySize: 2048
    Timeout: 900
    Environment:
      Variables:
        ENVIRONMENT: !Ref Environment
        PROJECT_NAME: !Ref ProjectName

Resources:
  # S3 Buckets
  ProcessingBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub "${ProjectName}-processing-${Environment}"
      VersioningConfiguration:
        Status: Enabled
      LifecycleConfiguration:
        Rules:
          - Id: DeleteOldTraces
            Status: Enabled
            ExpirationInDays: 90
            NoncurrentVersionExpirationInDays: 30
          - Id: TransitionToIA
            Status: Enabled
            Transitions:
              - TransitionInDays: 30
                StorageClass: STANDARD_IA
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Project
          Value: !Ref ProjectName

  DocumentsBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub "${ProjectName}-documents-${Environment}"
      VersioningConfiguration:
        Status: Enabled
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Project
          Value: !Ref ProjectName

  # EventBridge Event Bus
  EventBus:
    Type: AWS::Events::EventBus
    Properties:
      Name: !Sub "${ProjectName}-events-${Environment}"
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Project
          Value: !Ref ProjectName

  # Dead Letter Queue
  DeadLetterQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Sub "${ProjectName}-dlq-${Environment}"
      MessageRetentionPeriod: 1209600  # 14 days
      VisibilityTimeout: 960  # 16 minutes (slightly more than Lambda timeout)
      ReceiveMessageWaitTimeSeconds: 20  # Long polling
      KmsMasterKeyId: alias/aws/sqs
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Project
          Value: !Ref ProjectName

  # Processing Queue
  ProcessingQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Sub "${ProjectName}-processing-${Environment}"
      VisibilityTimeout: 960  # 16 minutes
      MessageRetentionPeriod: 345600  # 4 days
      ReceiveMessageWaitTimeSeconds: 20
      RedrivePolicy:
        deadLetterTargetArn: !GetAtt DeadLetterQueue.Arn
        maxReceiveCount: 3
      KmsMasterKeyId: alias/aws/sqs
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Project
          Value: !Ref ProjectName

  # DynamoDB Table for State Management
  StateTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub "${ProjectName}-state-${Environment}"
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
        - AttributeName: timestamp
          AttributeType: N
        - AttributeName: status
          AttributeType: S
        - AttributeName: service
          AttributeType: S
      KeySchema:
        - AttributeName: id
          KeyType: HASH
        - AttributeName: timestamp
          KeyType: RANGE
      GlobalSecondaryIndexes:
        - IndexName: StatusIndex
          KeySchema:
            - AttributeName: status
              KeyType: HASH
            - AttributeName: timestamp
              KeyType: RANGE
          Projection:
            ProjectionType: ALL
        - IndexName: ServiceIndex
          KeySchema:
            - AttributeName: service
              KeyType: HASH
            - AttributeName: timestamp
              KeyType: RANGE
          Projection:
            ProjectionType: ALL
      StreamSpecification:
        StreamViewType: NEW_AND_OLD_IMAGES
      PointInTimeRecoverySpecification:
        PointInTimeRecoveryEnabled: true
      SSESpecification:
        SSEEnabled: true
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Project
          Value: !Ref ProjectName

  # Session Table for Browser Management
  SessionTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub "${ProjectName}-sessions-${Environment}"
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: sessionId
          AttributeType: S
        - AttributeName: createdAt
          AttributeType: N
      KeySchema:
        - AttributeName: sessionId
          KeyType: HASH
        - AttributeName: createdAt
          KeyType: RANGE
      TimeToLiveSpecification:
        AttributeName: ttl
        Enabled: true
      SSESpecification:
        SSEEnabled: true
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Project
          Value: !Ref ProjectName

  # IAM Role for Lambda Functions
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "${ProjectName}-lambda-role-${Environment}"
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - arn:aws:iam::aws:policy/AWSXRayDaemonWriteAccess
      Policies:
        - PolicyName: S3Access
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:PutObject
                  - s3:DeleteObject
                  - s3:ListBucket
                Resource:
                  - !Sub "${ProcessingBucket.Arn}"
                  - !Sub "${ProcessingBucket.Arn}/*"
                  - !Sub "${DocumentsBucket.Arn}"
                  - !Sub "${DocumentsBucket.Arn}/*"
        - PolicyName: DynamoDBAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:PutItem
                  - dynamodb:GetItem
                  - dynamodb:UpdateItem
                  - dynamodb:DeleteItem
                  - dynamodb:Query
                  - dynamodb:Scan
                Resource:
                  - !GetAtt StateTable.Arn
                  - !Sub "${StateTable.Arn}/index/*"
                  - !GetAtt SessionTable.Arn
        - PolicyName: SQSAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - sqs:SendMessage
                  - sqs:ReceiveMessage
                  - sqs:DeleteMessage
                  - sqs:GetQueueAttributes
                Resource:
                  - !GetAtt ProcessingQueue.Arn
                  - !GetAtt DeadLetterQueue.Arn
        - PolicyName: EventBridgeAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - events:PutEvents
                Resource: !GetAtt EventBus.Arn
        - PolicyName: SSMAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - ssm:GetParameter
                  - ssm:GetParametersByPath
                Resource: !Sub "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/${ProjectName}/*"
        - PolicyName: CloudWatchMetrics
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - cloudwatch:PutMetricData
                Resource: "*"
                Condition:
                  StringEquals:
                    cloudwatch:namespace: !Sub "${ProjectName}/${Environment}"

  # SNS Topic for Alerts
  AlertTopic:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: !Sub "${ProjectName}-alerts-${Environment}"
      DisplayName: SCDOR Rebuild Alerts
      KmsMasterKeyId: alias/aws/sns
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Project
          Value: !Ref ProjectName

  # SNS Email Subscription (placeholder - update with real email)
  AlertEmailSubscription:
    Type: AWS::SNS::Subscription
    Properties:
      Protocol: email
      TopicArn: !Ref AlertTopic
      Endpoint: alerts@example.com  # UPDATE THIS

  # Parameter Store for Configuration
  CaptchaApiKeyParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub "/${ProjectName}/${Environment}/captcha_api_key"
      Type: String
      Value: "PLACEHOLDER_UPDATE_IN_CONSOLE"
      Description: 2Captcha API Key
      Tags:
        Environment: !Ref Environment
        Project: !Ref ProjectName

  OpenAIApiKeyParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub "/${ProjectName}/${Environment}/openai_api_key"
      Type: String
      Value: "PLACEHOLDER_UPDATE_IN_CONSOLE"
      Description: OpenAI API Key
      Tags:
        Environment: !Ref Environment
        Project: !Ref ProjectName

  SlackWebhookParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub "/${ProjectName}/${Environment}/slack_webhook_url"
      Type: String
      Value: "PLACEHOLDER_UPDATE_IN_CONSOLE"
      Description: Slack Webhook URL for notifications
      Tags:
        Environment: !Ref Environment
        Project: !Ref ProjectName

  # CloudWatch Log Groups
  ApplicationLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/lambda/${ProjectName}-${Environment}"
      RetentionInDays: 30

  # CloudWatch Dashboard
  MonitoringDashboard:
    Type: AWS::CloudWatch::Dashboard
    Properties:
      DashboardName: !Sub "${ProjectName}-${Environment}"
      DashboardBody: !Sub |
        {
          "widgets": [
            {
              "type": "metric",
              "x": 0,
              "y": 0,
              "width": 12,
              "height": 6,
              "properties": {
                "title": "System Health Overview",
                "period": 300,
                "stat": "Average",
                "region": "${AWS::Region}",
                "metrics": [
                  ["${ProjectName}/${Environment}", "ErrorRate", {"label": "Error Rate %"}],
                  [".", "SuccessRate", {"label": "Success Rate %"}],
                  [".", "ProcessingTime", {"label": "Avg Processing Time (s)"}]
                ]
              }
            },
            {
              "type": "metric",
              "x": 12,
              "y": 0,
              "width": 12,
              "height": 6,
              "properties": {
                "title": "Browser Automation Metrics",
                "period": 300,
                "stat": "Sum",
                "region": "${AWS::Region}",
                "metrics": [
                  ["${ProjectName}/${Environment}", "BrowserCrashes", {"label": "Browser Crashes"}],
                  [".", "CaptchaAttempts", {"label": "CAPTCHA Attempts"}],
                  [".", "CaptchaSuccess", {"label": "CAPTCHA Successes"}]
                ]
              }
            },
            {
              "type": "metric",
              "x": 0,
              "y": 6,
              "width": 12,
              "height": 6,
              "properties": {
                "title": "Lambda Performance",
                "period": 300,
                "stat": "Average",
                "region": "${AWS::Region}",
                "metrics": [
                  ["AWS/Lambda", "Duration", {"stat": "Average"}],
                  [".", "Errors", {"stat": "Sum"}],
                  [".", "Throttles", {"stat": "Sum"}]
                ],
                "view": "timeSeries",
                "stacked": false
              }
            },
            {
              "type": "metric",
              "x": 12,
              "y": 6,
              "width": 12,
              "height": 6,
              "properties": {
                "title": "Queue Metrics",
                "period": 300,
                "stat": "Average",
                "region": "${AWS::Region}",
                "metrics": [
                  ["AWS/SQS", "ApproximateNumberOfMessagesVisible", {"dimensions": {"QueueName": "${ProcessingQueue}"}}],
                  [".", "ApproximateNumberOfMessagesVisible", {"dimensions": {"QueueName": "${DeadLetterQueue}"}}]
                ]
              }
            }
          ]
        }

Outputs:
  ProcessingBucketName:
    Description: Name of the processing S3 bucket
    Value: !Ref ProcessingBucket
    Export:
      Name: !Sub "${ProjectName}-ProcessingBucket-${Environment}"

  DocumentsBucketName:
    Description: Name of the documents S3 bucket
    Value: !Ref DocumentsBucket
    Export:
      Name: !Sub "${ProjectName}-DocumentsBucket-${Environment}"

  EventBusName:
    Description: Name of the EventBridge event bus
    Value: !Ref EventBus
    Export:
      Name: !Sub "${ProjectName}-EventBus-${Environment}"

  ProcessingQueueUrl:
    Description: URL of the processing queue
    Value: !Ref ProcessingQueue
    Export:
      Name: !Sub "${ProjectName}-ProcessingQueue-${Environment}"

  DeadLetterQueueUrl:
    Description: URL of the dead letter queue
    Value: !Ref DeadLetterQueue
    Export:
      Name: !Sub "${ProjectName}-DeadLetterQueue-${Environment}"

  StateTableName:
    Description: Name of the state DynamoDB table
    Value: !Ref StateTable
    Export:
      Name: !Sub "${ProjectName}-StateTable-${Environment}"

  SessionTableName:
    Description: Name of the session DynamoDB table
    Value: !Ref SessionTable
    Export:
      Name: !Sub "${ProjectName}-SessionTable-${Environment}"

  LambdaExecutionRoleArn:
    Description: ARN of the Lambda execution role
    Value: !GetAtt LambdaExecutionRole.Arn
    Export:
      Name: !Sub "${ProjectName}-LambdaRole-${Environment}"

  AlertTopicArn:
    Description: ARN of the SNS alert topic
    Value: !Ref AlertTopic
    Export:
      Name: !Sub "${ProjectName}-AlertTopic-${Environment}"